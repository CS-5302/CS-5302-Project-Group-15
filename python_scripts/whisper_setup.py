# -*- coding: utf-8 -*-
"""whisper_test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/whisper-test-4960a203-9545-44ef-91d2-9e45eaececdb.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240331/auto/storage/goog4_request%26X-Goog-Date%3D20240331T195915Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D185a528f6d9d45771cd0649bb0ed80758324cad8dcf2d5f5c8957377b20e38df55547879bf94892c941b6c56a2261490a990a695fc3ff8ce09e395632b3f7540ecce905fcc3d8b998cd89563af1c6411b1297e47b75ede16a9e5153a5b497d75f87daaea07573157d4bdb64065c2af1a863bacc8dd7a6316d0c933730367d6a9719c59335dc27782875eddc9ea869634140c9a99d1289d309a040c0508e3dc7c5023317cbc68320f90b9077f5eaece0ef6d9e3ba41e94845654acd30e716aed761174a90651dd0b7cf13d835e284b5fb72b8d5e4b2613420d1b2ada6f2ecbc820478a14751b041c500a0c9532270738d807b905d2a4c765cd78868dd9413ab51
"""

# Install the necessary packages to run this code
!pip install git+https://github.com/openai/whisper.git
!sudo apt update && sudo apt install ffmpeg

# Import necessary modules for the code below
import subprocess
import re

# Specify audio file path (.mp3, .wav, .m4a)
audio_file = "/kaggle/input/new-data/Recording (3).m4a"

# List of available whisper models to choose from
models = ["tiny", "base", "small", "medium", "large"]

"""
A dictionary object for storing transcripts generated from each model.
User can choose to use only one model (the best one)
"""
transcript = {}

for model in models:

#     Outputs stdout from command-line
    command = subprocess.run(["whisper", audio_file, "--model", model, "--task", "translate"], capture_output=True, text=True)
    output = command.stdout

#     Patterns of interest in stdout
    lang_pattern = r'Detected language: (\w+)\n\['
    text_pattern = r'\]\s*(.*)\n'

    match_language = re.search(lang_pattern, output)
    match_text = re.search(text_pattern, output)

#     Saving the generated text as a new entry in the dictionary object
    transcript[model] = {'lang': match_language.group(1), 'text': match_text.group(1)}

print(transcript)

